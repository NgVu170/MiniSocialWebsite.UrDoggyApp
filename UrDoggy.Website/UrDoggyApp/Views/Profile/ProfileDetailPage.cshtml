@model UrDoggy.Website.Models.ProfileDetailViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var profile = Model.User;
    var defaultAvatar = Url.Content("~/images/default-avatar.png");
    string profileAvatarUrl = string.IsNullOrWhiteSpace(profile.ProfilePicture)
        ? defaultAvatar
        : Url.Content(profile.ProfilePicture);
}

<style>
    /* Profile Header */
    .text-center.mb-4 {
        background: linear-gradient(135deg, rgba(37, 211, 102, 0.1) 0%, rgba(9, 132, 227, 0.1) 100%);
        padding: 2rem;
        border-radius: 1.5rem;
        margin: 2rem auto;
        max-width: 800px;
        box-shadow: var(--shadow);
    }

    .rounded-circle[style*="240px"] {
        border: 4px solid var(--secondary);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .rounded-circle[style*="240px"]:hover {
            transform: scale(1.02) rotate(2deg);
            box-shadow: 0 12px 32px rgba(0, 0, 0, 0.15);
        }

    /* Action Buttons */
    .btn-outline-danger,
    .btn-outline-primary,
    .btn-primary {
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
    }

        .btn-primary:not(:disabled):hover {
            background: linear-gradient(135deg, #25D366 0%, #0984e3 100%);
            transform: translateY(-2px);
        }

        .btn-outline-danger:hover {
            background: #dc3545;
            color: white !important;
        }

    /* Post Cards */
    .post-card {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

        .post-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
        }

    /* Comment Section */
    .bg-light.rounded.p-2 {
        background: rgba(0, 184, 148, 0.05) !important;
        border-left: 3px solid var(--accent);
    }

    textarea.form-control {
        border-radius: 1rem;
        border: 1px solid rgba(0, 0, 0, 0.1);
        transition: border-color 0.3s ease;
    }

        textarea.form-control:focus {
            border-color: var(--secondary);
            box-shadow: 0 0 0 3px rgba(9, 132, 227, 0.1);
        }

    /* Voting Buttons */
    .btn-outline-success, .btn-outline-danger {
        min-width: 80px;
        position: relative;
    }

        .btn-outline-success:hover::after,
        .btn-outline-danger:hover::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.1);
        }

    /* Mobile Optimization */
    @@media (max-width: 768px) {
        .rounded-circle[style*="240px"] {
            width: 180px !important;
            height: 180px !important;
        }

        .d-flex.gap-2 {
            flex-wrap: wrap;
        }

        .btn {
            margin: 4px;
            flex-grow: 1;
        }
    }

    /* Loading States */
    button:disabled {
        opacity: 0.7;
        position: relative;
    }

        button:disabled::after {
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            border: 2px solid #fff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 0.8s linear infinite;
            transform: translate(-50%, -50%);
        }

    @@keyframes spin {
        to {
            transform: translate(-50%, -50%) rotate(360deg);
        }
    }
</style>

<div class="text-center mb-5">
    <img src="@profileAvatarUrl"
         class="rounded-circle mb-3"
         width="240" height="240" />
    <h2>@profile.DisplayName</h2>
    <p class="text-muted">@profile.Bio</p>

    @if (Model.IsOwnProfile)
    {
        <a asp-controller="Profile"
           asp-action="Edit"
           class="btn btn-secondary">
            Edit Profile
        </a>
    }
    else if (Model.IsFriend)
    {
        <form asp-controller="Friends"
              asp-action="Unfriend"
              method="post"
              class="d-inline">
            @Html.AntiForgeryToken()
            <input type="hidden" name="friendId" value="@profile.Id" />
            <button type="submit" class="btn btn-outline-danger">
                Unfriend
            </button>
        </form>
    }
    else if (Model.HasSentRequest)
    {
        <button class="btn btn-outline-primary" disabled>Request Sent</button>
    }
    else if (Model.HasReceivedRequest)
    {
        <form asp-controller="Friends"
              asp-action="Respond"
              method="post"
              class="d-inline">
            @Html.AntiForgeryToken()
            <input type="hidden" name="requestId" value="@profile.Id" />
            <button name="accept" value="true" class="btn btn-sm btn-success">Accept</button>
            <button name="accept" value="false" class="btn btn-sm btn-danger">Reject</button>
        </form>
    }
    else if (Model.CanSendRequest)
    {
        <form asp-controller="Friends"
              asp-action="SendRequest"
              method="post"
              class="d-inline">
            @Html.AntiForgeryToken()
            <input type="hidden" name="friendId" value="@profile.Id" />
            <button type="submit" class="btn btn-primary">Add Friend</button>
        </form>
    }
</div>

<hr />

<div class="profile-posts">
    <h4>
        @(Model.IsOwnProfile
            ? "Your Posts"
            : $"{profile.DisplayName}'s Posts")
    </h4>

    @foreach (var post in Model.Posts)
    {
        <div class="card mb-4">
            <div class="card-body">
                <p>@post.Content</p>
                <small class="text-muted">@post.CreatedAt.ToString("g")</small>
                <button type="button"
                        class="btn btn-sm btn-outline-secondary ms-2"
                        onclick="copyShareLink(@post.Id)">
                    🔗 Share
                </button>
            </div>

            @if (Model.CommentsMap.ContainsKey(post.Id))
            {
                <div class="card-footer">
                    @foreach (var c in Model.CommentsMap[post.Id])
                    {
                        var commenterAvatar = string.IsNullOrWhiteSpace(c.User.ProfilePicture)
                        ? defaultAvatar
                        : Url.Content(c.User.ProfilePicture);

                        <div class="d-flex align-items-start mb-2">
                            <img src="@commenterAvatar"
                                 class="rounded-circle me-2"
                                 width="32" height="32" />
                            <div>
                                <strong>@c.User.UserName</strong> @c.Content
                                <div class="text-muted small">
                                    @c.CreatedAt.ToString("t")
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        function copyShareLink(postId) {
            const url = `${window.location.origin}/Newsfeed/Details/${postId}`;
            navigator.clipboard.writeText(url)
                .then(() => alert('Link copied to clipboard'))
                .catch(() => alert('Failed to copy URL'));
        }
    </script>
}