@using UrDoggy.Core.Models
@using System.Collections
@using System.Linq

@inject UrDoggy.Services.Interfaces.IUserService UserService

@{
    Layout = "_Layout";
    int me = Context.Session.GetInt32("UserId") ?? 0;
    var chats = ((IEnumerable)ViewBag.Chats).Cast<ConversationDto>().ToList();
    int activeId = (int)ViewBag.ActiveUser;
    var thread = (List<Message>)ViewBag.Thread;
    var partner = chats.FirstOrDefault(c => c.OtherId == activeId);
    var defaultAvatar = Url.Content("~/images/default-avatar.png");
}

<style>
    /* Message System Style */
    :root {
        --msg-primary: #25D366;
        --msg-secondary: #0984e3;
        --msg-bg: #f8f9fa;
        --msg-card: #ffffff;
        --msg-border: rgba(0, 0, 0, 0.1);
    }

    .list-group-item {
        border: none;
        border-radius: 1.5rem !important;
        margin-bottom: 0.5rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        background: var(--msg-card);
    }

        .list-group-item.active {
            background: linear-gradient(135deg, var(--msg-primary) 0%, var(--msg-secondary) 100%) !important;
            color: white !important;
            box-shadow: 0 4px 12px rgba(37, 211, 102, 0.2);
        }

        .list-group-item:not(.active):hover {
            transform: translateX(8px);
            background: rgba(0, 184, 148, 0.05);
        }

    .chat-window {
        background: var(--msg-bg);
        border-radius: 1.5rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);
        display: flex;
        flex-direction: column;
        height: calc(100vh - 160px);
    }

    .message-bubble {
        max-width: 70%;
        border-radius: 1.25rem;
        position: relative;
        transition: all 0.3s ease;
    }

        .message-bubble.mine {
            background: linear-gradient(135deg, var(--msg-primary) 0%, var(--msg-secondary) 100%);
            color: white;
            border-bottom-right-radius: 0.5rem;
        }

        .message-bubble.other {
            background: var(--msg-card);
            border: 1px solid var(--msg-border);
            border-bottom-left-radius: 0.5rem;
        }

        .message-bubble::after {
            content: "";
            position: absolute;
            bottom: -8px;
            width: 16px;
            height: 16px;
            background: inherit;
            clip-path: polygon(0 0, 100% 0, 100% 100%);
        }

        .message-bubble.mine::after {
            right: 0;
            transform: rotate(-90deg);
        }

        .message-bubble.other::after {
            left: 0;
            transform: rotate(180deg);
        }

    .send-box {
        background: var(--msg-card);
        border-radius: 1.5rem;
        box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.05);
        padding: 1rem;
        margin-top: 1rem;
    }

    .typing-indicator {
        display: flex;
        gap: 4px;
        padding: 8px 16px;
        background: var(--msg-card);
        border-radius: 1rem;
        width: fit-content;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

        .typing-indicator div {
            width: 6px;
            height: 6px;
            background: var(--msg-primary);
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }

            .typing-indicator div:nth-child(2) {
                animation-delay: 0.2s;
            }

            .typing-indicator div:nth-child(3) {
                animation-delay: 0.4s;
            }

    @@keyframes typing {
        0%, 100% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-4px);
        }
    }

    .avatar-status {
        position: relative;
    }

        .avatar-status::after {
            content: "";
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 12px;
            height: 12px;
            border: 2px solid var(--msg-card);
            border-radius: 50%;
            background: #00b894;
        }

    @@media (max-width: 768px) {
        .chat-window {
            border-radius: 0;
            height: calc(100vh - 120px);
        }

        .message-bubble {
            max-width: 85%;
        }
    }
</style>


@section LeftSidebar {
    <div class="px-2">
        <h6 class="px-1">Chats</h6>
        <ul class="list-group list-group-flush">
            @foreach (var c in chats)
            {
                bool isActive = c.OtherId == activeId;
                var user = await UserService.GetById(c.OtherId);
                string avatarUrl = string.IsNullOrWhiteSpace(user?.ProfilePicture)
                ? defaultAvatar
                : Url.Content(user.ProfilePicture);

                <li class="list-group-item p-0 mb-2 @(isActive ? "active" : "")">
                    <a href="@Url.Action("Index","Messages", new { otherUserId = c.OtherId })"
                       class="d-flex align-items-start text-reset text-decoration-none p-2">
                        <img src="@avatarUrl"
                             class="rounded-circle me-2"
                             style="width:48px;height:48px;" />
                        <div class="flex-grow-1">
                            <div class="fw-bold">@c.OtherUsername</div>
                            <div class="small text-muted">
                                @(!String.IsNullOrEmpty(c.Preview) ? c.Time.ToString("g") : "")
                            </div>
                            <div class="small text-truncate" style="max-width:100%">
                                @if (String.IsNullOrEmpty(c.Preview))
                                {
                                    <em class="text-muted">No messages yet</em>
                                }
                                else
                                {
                                    <strong>
                                        @(c.PreviewSenderId == me ? "You:" : $"{c.OtherUsername}:")
                                    </strong>
                                    @c.Preview
                                }
                            </div>
                        </div>
                    </a>
                </li>
            }
        </ul>
    </div>
}

@section RightSidebar {
    @if (partner != null)
    {
        var user = await UserService.GetById(partner.OtherId);
        string avatarUrl = string.IsNullOrWhiteSpace(user?.ProfilePicture)
            ? defaultAvatar
            : Url.Content(user.ProfilePicture);

        <div class="border rounded bg-white p-3 text-center">
            <img src="@avatarUrl"
                 class="rounded-circle mb-2"
                 style="width:80px;height:80px;" />
            <h6>@partner.OtherUsername</h6>
            <a asp-controller="Profile"
               asp-action="Index"
               asp-route-id="@partner.OtherId"
               class="btn btn-sm btn-outline-primary mt-2">
                View Profile
            </a>
        </div>
    }
}

<div class="chat-window">
    @foreach (var m in thread)
    {
        bool mine = m.SenderId == me;
        <div class="d-flex mb-2 @(mine ? "justify-content-end" : "")">
            <div class="position-relative p-2 rounded @(mine ? "bg-success text-white" : "bg-secondary text-white")"
                 style="max-width:70%; white-space:normal; word-break:break-word;">
                @if (mine)
                {
                    <div class="dropdown position-absolute top-0 end-0">
                        <a href="#"
                           class="text-white text-decoration-none"
                           role="button"
                           id="msgMenuBtn@m.Id"
                           data-bs-toggle="dropdown"
                           aria-expanded="false"
                           style="padding: 0.25rem 0.5rem; display: inline-block;">
                            <i class="fas fa-ellipsis-h"></i>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end"
                            aria-labelledby="msgMenuBtn@m.Id">
                            <li>
                                <form asp-action="Delete"
                                      method="post"
                                      class="m-0">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="messageId" value="@m.Id" />
                                    <input type="hidden" name="otherUserId" value="@activeId" />
                                    <button type="submit" class="dropdown-item text-danger">
                                        Delete
                                    </button>
                                </form>
                            </li>
                        </ul>
                    </div>
                }
                @m.Content
                <div class="small text-muted mt-1 text-end">
                    @(mine ? "You" : (m.Sender?.UserName ?? "Unknown")) @m.SentAt.ToString("g")
                </div>
            </div>
        </div>
    }
</div>

<div class="send-box">
    @if (activeId != 0)
    {
        <form asp-action="Send" method="post" class="d-flex">
            @Html.AntiForgeryToken()
            <input type="hidden" name="toUserId" value="@activeId" />
            <input type="text" name="content"
                   class="form-control me-2"
                   placeholder="Type a message…"
                   required />
            <button class="btn btn-success">Send</button>
        </form>
    }
</div>

@section Scripts {
    <script>
        window.onload = () => {
            const wnd = document.querySelector('.chat-window');
            if (wnd) wnd.scrollTop = wnd.scrollHeight;
        };

        // Real-time message animation
        document.querySelector('form').addEventListener('submit', function(e) {
            const input = this.querySelector('input[name="content"]');
            if (input.value.trim()) {
                const tempMsg = document.createElement('div');
                tempMsg.className = 'message-bubble mine';
                tempMsg.innerHTML = `
                    <div class="p-2">${input.value}</div>
                    <div class="small text-end opacity-75">Sending...</div>
                `;
                document.querySelector('.chat-window').appendChild(tempMsg);
                input.value = '';
            }
        });

        // Typing detection
        let typingTimeout;
        document.querySelector('input[name="content"]').addEventListener('input', function() {
            // Implement typing detection logic here
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                // Send typing stop event
            }, 1000);
        });

        // Message reactions
        document.querySelectorAll('.message-bubble').forEach(bubble => {
            bubble.addEventListener('contextmenu', function(e) {
                e.preventDefault();
                showReactionMenu(this, e.clientX, e.clientY);
            });
        });

        function showReactionMenu(element, x, y) {
            // Implement reaction picker UI
        }
    </script>
}