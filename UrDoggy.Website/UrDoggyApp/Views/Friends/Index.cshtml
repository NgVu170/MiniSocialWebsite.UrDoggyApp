@using Microsoft.AspNetCore.Mvc
@inject UrDoggy.Services.Interfaces.IFriendService FriendService
@inject UrDoggy.Services.Interfaces.IUserService UserService

@{
    Layout = "_Layout";
    string active = (ViewBag.ActiveTab as string) ?? "all";

    var friends = ViewBag.Friends as List<UrDoggy.Core.Models.User> ?? new List<UrDoggy.Core.Models.User>();
    var requestsRaw = ViewBag.Requests as List<(int RequestId, int RequesterId, string Username)>
                        ?? new List<(int, int, string)>();
    var newFriends = ViewBag.NewFriends as List<UrDoggy.Core.Models.User>
                        ?? new List<UrDoggy.Core.Models.User>();
    var incoming = ViewBag.IncomingIds as HashSet<int>
                        ?? new HashSet<int>();
    var requestMap = ViewBag.RequestMap as Dictionary<int, int>
                        ?? new Dictionary<int, int>();
    int? sessionUserId = ViewBag.CurrentUserId ?? 0;
    var defaultAvatar = Url.Content("~/images/default-avatar.png");
}

<style>
    /* Friends Page Style */
    :root {
        --friend-primary: #25D366;
        --friend-secondary: #0984e3;
        --friend-bg: #f8f9fa;
        --friend-card: #ffffff;
        --friend-border: rgba(0, 0, 0, 0.1);
    }

    .list-group-item {
        border: none;
        border-radius: 1rem !important;
        margin-bottom: 0.5rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

        .list-group-item.active {
            background: linear-gradient(135deg, var(--friend-primary) 0%, var(--friend-secondary) 100%) !important;
            color: white !important;
            box-shadow: 0 4px 12px rgba(37, 211, 102, 0.2);
        }

        .list-group-item:not(.active):hover {
            transform: translateX(8px);
            background: rgba(0, 184, 148, 0.05);
        }

    .card {
        border: none;
        border-radius: 1.5rem;
        background: var(--friend-card);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
    }

        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 24px rgba(37, 211, 102, 0.1);
        }

        .card::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: linear-gradient(180deg, var(--friend-primary), var(--friend-secondary));
        }

    .btn-primary {
        background: linear-gradient(135deg, var(--friend-primary) 0%, var(--friend-secondary) 100%);
        border: none;
        border-radius: 0.75rem;
        padding: 0.5rem 1.5rem;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }

        .btn-primary::after {
            content: "";
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: rgba(255, 255, 255, 0.1);
            transform: rotate(45deg);
            transition: all 0.5s ease;
        }

        .btn-primary:hover::after {
            left: 120%;
        }

    .btn-danger {
        background: #ff4757;
        border: none;
        border-radius: 0.75rem;
        padding: 0.5rem 1.5rem;
        transition: all 0.3s ease;
    }

        .btn-danger:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(255, 71, 87, 0.2);
        }


    @@media (max-width: 768px) {
        .card {
            margin-left: 0.5rem;
            margin-right: 0.5rem;
        }

        .list-group-item {
            border-radius: 0.75rem !important;
        }

        .rounded-circle {
            width: 48px !important;
            height: 48px !important;
        }
    }

    /* Loading Animation */
    .friend-loading {
        position: relative;
        overflow: hidden;
    }

        .friend-loading::after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            animation: loading 1.5s infinite;
        }

    @@keyframes loading {
        0% {
            transform: translateX(-100%);
        }

        100% {
            transform: translateX(100%);
        }
    }
</style>

<script>
    document.querySelectorAll('form').forEach(form => {
        form.addEventListener('submit', function(e) {
            const btn = this.querySelector('button');
            if (btn) {
                btn.innerHTML = `<span class="spinner-border spinner-border-sm" role="status"></span> Processing...`;
                btn.disabled = true;
            }
        });
    });
</script>


@section LeftSidebar {
    <ul class="list-group">
        <li class="list-group-item @(active=="all"      ? "active" : "")">
            <a asp-controller="Friends"
               asp-action="Index"
               asp-route-tab="all"
               class="text-decoration-none text-dark">
                All Friends
            </a>
        </li>
        <li class="list-group-item @(active=="requests" ? "active" : "")">
            <a asp-route-tab="requests"
               asp-action="Index"
               asp-controller="Friends"
               class="text-decoration-none text-dark">
                Friend Requests
            </a>
        </li>
        <li class="list-group-item @(active=="new"      ? "active" : "")">
            <a asp-route-tab="new"
               asp-action="Index"
               asp-controller="Friends"
               class="text-decoration-none text-dark">
                New Friends
            </a>
        </li>
    </ul>
}

<div>
    @if (active == "all")
    {
        <h4>Your Friends</h4>
        @if (!friends.Any())
        {
            <p class="text-muted">You have no friends yet.</p>
        }
        else
        {
            @foreach (var f in friends)
            {
                var avatarUrl = string.IsNullOrWhiteSpace(f.ProfilePicture)
                ? defaultAvatar
                : Url.Content(f.ProfilePicture);

                <div class="card mb-3">
                    <div class="card-body d-flex align-items-center">
                        <img src="@avatarUrl"
                             class="rounded-circle"
                             style="width:64px;height:64px;" />
                        <div class="flex-grow-1 ms-3"><strong>@f.UserName</strong></div>
                        <form asp-action="Unfriend" method="post" class="m-0">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="friendId" value="@f.Id" />
                            <button class="btn btn-sm btn-danger">Unfriend</button>
                        </form>
                    </div>
                </div>
            }
        }
    }

    else if (active == "requests")
    {
        <h4>Pending Friend Requests</h4>
        @if (!requestsRaw.Any())
        {
            <p class="text-muted">No pending requests.</p>
        }
        else
        {
            @foreach (var req in requestsRaw)
            {
                var currentUser = await UserService.GetById(req.RequesterId);
                var avatarUrl = string.IsNullOrWhiteSpace(currentUser?.ProfilePicture)
                ? defaultAvatar
                : Url.Content(currentUser.ProfilePicture);

                <div class="card mb-3">
                    <div class="card-body d-flex align-items-center">
                        <img src="@avatarUrl"
                             class="rounded-circle"
                             style="width:64px;height:64px;" />
                        <div class="flex-grow-1 ms-3"><strong>@req.Username</strong></div>
                        <form asp-action="Respond" method="post" class="d-inline me-1">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="requestId" value="@req.RequestId" />
                            <input type="hidden" name="accept" value="true" />
                            <button class="btn btn-sm btn-primary">Confirm</button>
                        </form>
                        <form asp-action="Respond" method="post" class="d-inline">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="requestId" value="@req.RequestId" />
                            <input type="hidden" name="accept" value="false" />
                            <button class="btn btn-sm btn-secondary">Delete</button>
                        </form>
                    </div>
                </div>
            }
        }
    }

    else
    {
        <h4>New Friends</h4>
        @if (!newFriends.Any())
        {
            <p class="text-muted">No new users to connect with.</p>
        }
        else
        {
            @foreach (var u in newFriends)
            {
                var avatarUrl = string.IsNullOrWhiteSpace(u.ProfilePicture)
                ? defaultAvatar
                : Url.Content(u.ProfilePicture);

                <div class="card mb-3">
                    <div class="card-body d-flex align-items-center">
                        <img src="@avatarUrl"
                             class="rounded-circle"
                             style="width:64px;height:64px;" />
                        <div class="flex-grow-1 ms-3"><strong>@u.UserName</strong></div>

                        @if (incoming.Contains(u.Id) && requestMap.TryGetValue(u.Id, out var reqId))
                        {
                            <form asp-action="Respond" method="post" class="d-inline me-1">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="requestId" value="@reqId" />
                                <input type="hidden" name="accept" value="true" />
                                <button class="btn btn-sm btn-primary">Confirm</button>
                            </form>
                            <form asp-action="Respond" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="requestId" value="@reqId" />
                                <input type="hidden" name="accept" value="false" />
                                <button class="btn btn-sm btn-secondary">Delete</button>
                            </form>
                        }
                        else
                        {
                            <form asp-action="SendRequest" method="post" class="m-0">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="friendId" value="@u.Id" />
                                <button class="btn btn-sm btn-primary">Add Friend</button>
                            </form>
                        }

                    </div>
                </div>
            }
        }
    }
</div>